export const updateProfileController= async(req,res)=>{
    try{
        const { fullName, email, username, currentPassword, newPassword, bio, link } = req.body;
        console.log("Uploaded files:", req.files); 


        let user = await User.findById(req.user._id);
       // console.log(user);
        if (!user) 
            return res.status(404).json({ message: "User not found" });

        if ((!newPassword && currentPassword) || (!currentPassword && newPassword)) {
			return res.status(400).json({ error: "Please provide both current password and new password" });
		};

        if (currentPassword && newPassword) {
			const isMatch = await bcrypt.compare(currentPassword, user.password);
			if (!isMatch) return res.status(400).json({ error: "Current password is incorrect" });
			if (newPassword.length < 6) {
				return res.status(400).json({ error: "Password must be at least 6 characters long" });
			}
			const salt = await bcrypt.genSalt(10);
			user.password = await bcrypt.hash(newPassword, salt);
		};

        if(req.files && req.files.profileImg && req.files.profileImg[0])  {
       
            try {
                if (user.profileImg) {
                    const publicId = user.profileImg.split("/").pop().split(".")[0];
                    await cloudinary.uploader.destroy(publicId);
                }
                user.profileImg = req.files.profileImg[0].path;
                console.log("profileimage",user.profileImg);
            } catch (error) {
                console.error("Error handling profile image:", error);
            }
        }

        if ( req.files.coverImg) {
            try {
                if (user.coverImg) {
                    const publicId = user.coverImg.split("/").pop().split(".")[0];
                    await cloudinary.uploader.destroy(publicId);
                }
                user.coverImg = req.files.coverImg[0].path;
                console.log("coverimage",user.coverImg);
            } catch (error) {
                console.error("Error handling cover image:", error);
            }
        }

		user.fullName = fullName || user.fullName;
		user.email = email || user.email;
		user.username = username || user.username;
		user.bio = bio || user.bio;
		user.link = link || user.link;

		user = await user.save();
		user.password = null;

		return res.status(200).json({
            messsage:"  user profile  updated successfully",
            user
        });

    }catch(error){
        console.log("Error :",error);
        return  res.status(500).json({
             message:"Internal server Error"});
    }
};

export const searchUserController = async(req,res)=>{
    try{
    const { fullName } = req.query;
    if (!fullName) {
      return res.status(400).json({ error: "Please provide a name." });
    };

    const users = await User.find({
        fullName: { $regex: fullName, $options: 'i' } 
      }).select('-password'); 

      if (users.length === 0) {
        return res.status(404).json({ message: "No users found." });
      };

      return res.status(200).json({
        messsage:" Found user profile  successfully",
         users 
        });
    }catch(error){
        console.log("Error :",error);
        return  res.status(500).json({ message:"Internal server Error"});
    }
}